name: Deployment to aws test environment

on:
  push:
    tags:
      - test

env:
  ENV_NAME: test
jobs:
  deploy:
    name: Build and Deploy App to Test
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    environment:
      name: test
    env:
      CLOUDFRONT_ID: '${{ secrets.TEST_CLOUDFRONT_ID }}'
    steps:
      - uses: actions/checkout@v2

      - name: Extract other env vars
        run: echo "AWS_SA_ROLE_ARN=$(make get-sa-role-arn)" >> $GITHUB_ENV

      - name: Print local env
        run: make print-env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: ca-central-1
          role-to-assume: ${{ env.AWS_SA_ROLE_ARN }}
          role-duration-seconds: 900
          role-session-name: ci-deployment

      - name: NextJS Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build app
        run: make build-prod-app

      - name: Deploy infra
        run: make deploy

      - name: Deploy app
        run: make deploy-app
